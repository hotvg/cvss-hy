<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd 
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd ">

	<description>Spring公共配置文件</description>

	<!-- 本配置文件用于整合spring+mybatis -->
	<!-- 1、扫描包 <context:component-scan base-package="" /> -->
	<!-- 2、jdbc配置地址 <context:property-placeholder location="" /> -->
	<!-- 3、配置datasource class="org.springframework.jdbc.datasource.DriverManagerDataSource" -->
	<!-- 4、加载sqlsessionfactory class="org.apache.ibatis.session.SqlSessionFactoryBean" -->
	<!-- 5、加载org.mybatis.spring.mapper.MapperScannerConfigurer模式 -->

	<!-- 地址 -->
	<context:property-placeholder location="classpath:common/jdbc.properties" />

	<!-- 1、配置数据源 下面是使用的spring中的连接池，后面自己的项目更改成 druid -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${jdbc.driver}" /> <property name="url" 
		value="${jdbc.url}" /> <property name="username" value="${jdbc.username}" 
		/> <property name="password" value="${jdbc.password}" /> </bean> -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- druid可以自动适配driver 根据下列url -->
		<!-- oracle : jdbc:oracle:thin:@10.20.149.85:1521:数据库名 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件 监控统计：stat 日志：log4j 防御sql注入 :wall -->
		<property name="filters" value="${jdbc.filters}" />
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、 
			testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 
			执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大,Oracle与mysql5.5以上 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时,poolPreparedStatements自动触发修改为true在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 
			可以把这个数值配置大一些，比如说100 -->
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${jdbc.maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 即超时回收机制 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 180 秒，也就是 3 分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
	</bean>

	<!-- 2、配置mybatis的工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 工厂所需数据源关联 -->
		<property name="dataSource" ref="dataSource" />
		<!-- MyBatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 持久层映射文件 用List配置多个mapper路径 *Mapper.xml表示以Mapper.xml结尾的文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 这个执行器会批量执行更新语句，还有SIMPLE和REUSE -->
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<!-- DAO接口所在包。通过mapperCannerConfigurer模式，在mybatis-spring JAR包下 两个参数 basePackage 
		sqlSessionFactoryBeanName -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cvss.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- 资源文件配置 自定义类 这个有什么用？ -->
	<!-- <bean id="propertyBean" class="com.ssmdemo.util.PropertyConfig"> <property 
		name="locations"> <list> <value>classpath:system-config.properties</value> 
		<value>classpath:properties-*.properties</value> </list> </property> </bean> -->

	<!-- 日志配置 -->
	<!--<bean id="propertyConfigurer"-->
		<!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="locations">-->
			<!--<list>-->
				<!--<value>classpath:common/log4j.properties</value>-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="ignoreUnresolvablePlaceholders" value="true" />-->
	<!--</bean>-->

	<!-- 使用annotation定义事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 开启定时任务 -->
	<task:annotation-driven />

</beans>